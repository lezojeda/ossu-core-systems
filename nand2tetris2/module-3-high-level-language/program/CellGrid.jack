/** The grid of cells storing the living state of each one */
class CellGrid {
    field int cellSize;
    field int cols;
    field int rows;
    field int cellCount;    
    field Array cells;
    field Array nextState;
    field Array tempNeighbors; // used to calculate living neighbors
    field Array neighborIndexes;

    constructor CellGrid new(int aCellSize) {
        let cellSize = aCellSize;
        let cols = 512 / aCellSize;
        let rows = 256 / aCellSize;
        let cellCount = rows * cols;
    
        let cells = Array.new(cellCount);
        let nextState = Array.new(cellCount);
        let tempNeighbors = Array.new(8);
    
        // Create array to hold 8 neighbor indexes for each cell
        let neighborIndexes = Array.new(cellCount * 8);
        
        do initCells();
        do precomputeNeighborIndexes();
    
        return this;
    }

    method void initCells() {
        var int rowIndex, columnIndex, index;
        // Fill cells array
        let rowIndex = 0;
        while (rowIndex < rows) {
            let columnIndex = 0;
            while (columnIndex < cols) {
                let index = rowIndex * cols + columnIndex;
                let cells[index] = Cell.new(columnIndex * cellSize, rowIndex * cellSize, cellSize);
                let columnIndex = columnIndex + 1;
            }
            let rowIndex = rowIndex + 1;
        }
        return;
    }

    method void precomputeNeighborIndexes() {
        var int cellIndex, startIndex;
        var int row, col;
        var int neighborCount;
        
        let cellIndex = 0;
        while (cellIndex < cellCount) {
            let startIndex = cellIndex * 8; // Each cell has up to 8 neighbors
            let row = cellIndex / cols;
            let col = cellIndex - (row * cols);
            let neighborCount = 0;
            
            // Initialize all neighbor slots to -1 (invalid)
            let neighborIndexes[startIndex] = -1;
            let neighborIndexes[startIndex + 1] = -1;
            let neighborIndexes[startIndex + 2] = -1;
            let neighborIndexes[startIndex + 3] = -1;
            let neighborIndexes[startIndex + 4] = -1;
            let neighborIndexes[startIndex + 5] = -1;
            let neighborIndexes[startIndex + 6] = -1;
            let neighborIndexes[startIndex + 7] = -1;
            
            // Top-left
            if ((~(row < 1)) & (~(col < 1))) {
                let neighborIndexes[startIndex + neighborCount] = ((row-1) * cols) + (col-1);
                let neighborCount = neighborCount + 1;
            }
            
            // Top
            if (~(row < 1)) {
                let neighborIndexes[startIndex + neighborCount] = ((row-1) * cols) + col;
                let neighborCount = neighborCount + 1;
            }
            
            // Top-right
            if ((~(row < 1)) & (col < (cols-1))) {
                let neighborIndexes[startIndex + neighborCount] = ((row-1) * cols) + (col+1);
                let neighborCount = neighborCount + 1;
            }
            
            // Left
            if (~(col < 1)) {
                let neighborIndexes[startIndex + neighborCount] = (row * cols) + (col-1);
                let neighborCount = neighborCount + 1;
            }
            
            // Right
            if (col < (cols-1)) {
                let neighborIndexes[startIndex + neighborCount] = (row * cols) + (col+1);
                let neighborCount = neighborCount + 1;
            }
            
            // Bottom-left
            if ((row < (rows-1)) & (~(col < 1))) {
                let neighborIndexes[startIndex + neighborCount] = ((row+1) * cols) + (col-1);
                let neighborCount = neighborCount + 1;
            }
            
            // Bottom
            if (row < (rows-1)) {
                let neighborIndexes[startIndex + neighborCount] = ((row+1) * cols) + col;
                let neighborCount = neighborCount + 1;
            }
            
            // Bottom-right
            if ((row < (rows-1)) & (col < (cols-1))) {
                let neighborIndexes[startIndex + neighborCount] = ((row+1) * cols) + (col+1);
                let neighborCount = neighborCount + 1;
            }
            
            let cellIndex = cellIndex + 1;
        }
        return;
    }

	method Cell getCell(int row, int col) {
		var int index;
		let index = row * cols + col;

		return cells[index];
	} 

	method void calculateNextState() {
		var int index, liveNeighbors;
        var Cell currentCell;
        var boolean isCurrentCellAlive;

		let index = 0;
		while (index < cellCount) {
			let liveNeighbors = countLiveNeighbors(index);

            // GAME OF LIFE RULES

            let currentCell = cells[index];
            let isCurrentCellAlive = currentCell.getIsAlive();

            if (isCurrentCellAlive) {
                if ((liveNeighbors = 2) | (liveNeighbors = 3)) {
                    let nextState[index] = true;
                } else {
                    let nextState[index] = false;
                }
            } else {
                if (liveNeighbors = 3) {
                    let nextState[index] = true;
                } else {
                    let nextState[index] = false;
                }
            }

			let index = index + 1;
		}
		return;
	}

    method void applyNextState() {
        var int index;
        var Cell currentCell;
        var boolean newState;

		let index = 0;
		while (index < cellCount) {
			let currentCell = cells[index];
            let newState = nextState[index];

            do currentCell.setIsAlive(newState);

			let index = index + 1;
		}
		return;
	}

    method int countLiveNeighbors(int cellIndex) {
        var int aliveCount, neighborIndex, index;
        var int startIndex;
        var Cell currentNeighbor;
        
        let aliveCount = 0;
        let startIndex = cellIndex * 8;
        let index = 0;
        
        while (index < 8) {
            let neighborIndex = neighborIndexes[startIndex + index];
            if (~(neighborIndex < 0)) { // skip invalid indexes
                let currentNeighbor = cells[neighborIndex];
                if (currentNeighbor.getIsAlive()) {
                    let aliveCount = aliveCount + 1;
                }
            }
            let index = index + 1;
        }
        
        return aliveCount;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
