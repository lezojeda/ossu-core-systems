class ConwayLifeGame {
	field boolean isPlaying;
	field Grid grid;
	field CellGrid cellGrid;
	field Selector selector;
	field int direction; // the selectors's current direction: 
	// 0=none, 1=up, 2=down, 3=left, 4=right

	constructor ConwayLifeGame new() {
		let isPlaying = false;
		let grid = Grid.new();
		let cellGrid = CellGrid.new();
		let selector = Selector.new();
		return this;
	}

	/** Moves the selector in the current direction. */
	method void moveSelector() {
		/** Fills or erases the cell in the current selector's location before moving */
		var Cell cell;
		let cell = cellGrid.getCell(selector.gety() / 8, selector.getx() / 8); // TODO: use cellSize instead of 8
		do cell.draw();

		if (direction = 1) { do selector.moveUp(); }
		if (direction = 2) { do selector.moveDown(); }
		if (direction = 3) { do selector.moveLeft(); }
		if (direction = 4) { do selector.moveRight(); }
 
		do Sys.wait(5);  // delays the next movement
		return;
	}

	method void toggleCurrentCell() {
		var Cell cell;
		let cell = cellGrid.getCell(selector.gety() / 8, selector.getx() / 8); // TODO: use cellSize instead of 8
		do cell.toggle();
		return;
	} 

	/** Runs the game: handles the user's inputs and moves the selector accordingly */
	method void run() {
		var char key;  // the key currently pressed by the user
		var boolean exit;
		let exit = false;
		
		while (~exit) {
		   // waits for a key to be pressed
		   while (key = 0) {
			  let key = Keyboard.keyPressed();
		   }

		   // only listen to P or Q keys if game is running
		   if (isPlaying) {
				if (key = 81)  { let exit = true; }  // q key

				if (key = 80 | key = 112) {          // P/p key, pause simulation
					let isPlaying = false;
			   }
		   }

		   if (~(isPlaying)) {
			   if (key = 81)  { let exit = true; }       // q key
			   if (key = 128) {						     // enter key
					do toggleCurrentCell();
			   }
			   if (key = 82 | key = 114) {             // R/r key, run simulation
				let isPlaying = true;
			   }
			   if (key = 131) {
				   let direction = 1;                  // up arrow
				   do moveSelector();
			   }
			   if (key = 133) {
				   let direction = 2;                  // down arrow
				   do moveSelector();
			   }
			   if (key = 130) {
				   let direction = 3;                  // left arrow
				   do moveSelector();
			   }
			   if (key = 132) {
				   let direction = 4;                  // right arrow
				   do moveSelector();
			   }
		   }
	
		   // waits for the key to be released
		   while (~(key = 0)) {
			  let key = Keyboard.keyPressed();
		   }
	   } // while
	   return;
	}

	/** Disposes this game. */
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
}